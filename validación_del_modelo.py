# -*- coding: utf-8 -*-
"""Validación del modelo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S9S3nBB9qOu4KEr3lkTCPAuLl0QUxSsp

# Tu primer modelo
"""

import pandas as pd

iowa_file_path = '/content/train.csv'

home_data = pd.read_csv(iowa_file_path)

"""## Especificar objetivo de predicción
Seleccione la variable objetivo, que corresponde al precio de venta. Guárdela en una nueva variable llamada y. Tendrá que imprimir una lista de las columnas para encontrar el nombre de la columna que necesita.
"""

# imprimir la lista de columnas del conjunto de datos para encontrar el nombre del objetivo de predicción
print(home_data.columns)

# Objetivo de prediccion
y = home_data.SalePrice

"""## Crear X

Ahora creará un DataFrame llamado X que contendrá las características predictivas.

Como sólo quiere algunas columnas de los datos originales, primero creará una lista con los nombres de las columnas que quiere en X.

Utilizará sólo las siguientes columnas en la lista (puede copiar y pegar toda la lista para ahorrar algo de escritura, aunque todavía tendrá que añadir comillas):

- LotArea
- YearBuilt
- 1stFlrSF
- 2ndFlrSF
- FullBath
- BedroomAbvGr
- TotRmsAbvGrd

Después de crear esa lista de características, utilízala para crear el DataFrame que utilizarás para ajustar el modelo.
"""

# Crear la lista de características
feature_names = ["LotArea", "YearBuilt", "1stFlrSF", "2ndFlrSF", "FullBath", "BedroomAbvGr", "TotRmsAbvGrd"]

# Seleccionar los datos correspondientes a las características en feature_names
X = home_data[feature_names]

"""# Revisar datos
Antes de construir un modelo, echa un vistazo rápido a X para verificar que parece sensato
"""

# Revisar datos
# imprimir descripción o estadísticas de X
print(X.describe(),"\n")
# imprimir las primeras lineas
print(X.head())

"""#Dividir Datos"""

from sklearn.model_selection import train_test_split

# Dividir los datos en datos de entrenamiento y datos de validación,
# tanto para las características como para el objetivo La división
# se basa en un generador de números aleatorios. Suministrar un valor
# numérico al argumento random_state garantiza que obtendremos la misma
# división cada vez que ejecutemos este script.
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)

"""# Especificar y ajustar el modelo
Cree un DecisionTreeRegressor y guárdelo en iowa_model. Asegúrese de que ha realizado la importación correspondiente desde sklearn para ejecutar este comando.

A continuación, ajuste el modelo que acaba de crear utilizando los datos en **X** y **y** que guardó anteriormente.
"""

# Importar DecisionTreeRegressor
from sklearn.tree import DecisionTreeRegressor

# Definir el modelo
model = DecisionTreeRegressor()

# Ajustar modelo
model.fit(train_X, train_y)

"""# Hacer predicciones
Realiza predicciones con el comando predecir del modelo utilizando X como datos. Guarda los resultados en una variable llamada predictions.

"""

# Obtener precios previstos con datos de validación
val_predictions = model.predict(val_X)
print(val_predictions)

"""#Calcular Error Absoluto"""

from sklearn.metrics import mean_absolute_error
# Calculo de error absoluto medio en los datos de validacion
print(mean_absolute_error(val_y, val_predictions))